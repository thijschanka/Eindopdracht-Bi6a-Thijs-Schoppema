import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;

public class VirusLogica {
	
	//Variables om het bestand te lezen
	static BufferedReader inFile;
	static URL url;
    static InputStream is = null;
    
    //variabelen ter opslag
    static HashMap<String, Set<Integer>> host_virus;
    static HashMap<Integer, Virus> id_virus;
    
    //variablen ter vergelijking
    static Set<Integer> virusenHost1, virusenHost2, intersection;

	protected static Map<String, HashMap> readFile(int a, String b) {
		
		try {
			if (a == 0) {
				url = new URL(b);
				is = url.openStream();  // throws an IOException
		        inFile = new BufferedReader(new InputStreamReader(is));
			} else inFile = new BufferedReader(new FileReader(b));
			
	        String line = inFile.readLine();            
 	        host_virus = new HashMap <String, Set<Integer>> ();
 	        id_virus = new HashMap<Integer, Virus>();
 	        
 	        Virus v;
 	        String[] buffer;
 	        String host;
 	        Set<Integer> idSet;
 	        
	        while ((line = inFile.readLine()) != null) {
	            buffer = line.split("\t");
	            
	            //virus ID = 0, soort = 1, classificatie = 2
	            //host ID = 7, host soort = 8
	            //POTENTIEEL pmid = 12
	            
	            if (buffer.length > 7) {
	            	
	            	if (!(id_virus.containsKey(Integer.parseInt(buffer[0])))) {
	            		v = new Virus();
	            		v.setId(Integer.parseInt(buffer[0]));
		            	v.setSoort(buffer[1]);
		            	v.setClassificatie(buffer[2]);
		            	id_virus.put(Integer.parseInt(buffer[0]), v);
	            	} else {
	            		v = id_virus.get(Integer.parseInt(buffer[0]));
	            	}
	            	
	            	host = buffer[7] + " ("+ buffer[8] + ")";
	            	v.setHostList(host);
	            	
	            	if (host_virus.containsKey(host)) {
	            		idSet = host_virus.get(host);
	            		idSet.add(Integer.parseInt(buffer[0]));
	            		host_virus.put(host, idSet);
	            	} else {
	            		idSet = new HashSet();
	            		idSet.add(Integer.parseInt(buffer[0]));
	            		host_virus.put(host, idSet);
	            	}
	            }
	        }
	        
	        inFile.close();
	        if (a == 0) is.close();
	        
	        Map<String, HashMap> map = new HashMap();
	        map.put("host_virus",host_virus);
	        map.put("id_virus",id_virus);
	        return map;
	        
	    } catch (IOException e) {
	        JOptionPane.showMessageDialog(null,
	                "File Error: " + e.toString());
	    }
		return null;
	}

	public static Map<String, Set<Integer>> krijgVirusen(String hostID1, String hostID2, String viralClass) {
				
		virusenHost1 = host_virus.get(hostID1);
		virusenHost2 = host_virus.get(hostID2);
		
		Set<Integer> virusenID = null;
		int id;
		Virus v;
		String clas;
		viralClass = viralClass.toLowerCase();
		
		for(int i = 0; i < 2; i++) {
			
			if (i == 0) virusenID = virusenHost1;
			else if (i == 1) virusenID = virusenHost2;
			
			for(Iterator<Integer> it = virusenID.iterator(); it.hasNext();) {
				id = it.next();
				v = id_virus.get(id);
				clas = v.getClassificatie().toLowerCase();
				
				if(!(viralClass.equals("none") || clas.contains(viralClass) ||
				   viralClass.equals("satellites or virophages") && (clas.contains("satellites") || clas.contains("virophages")))) {
					if (i == 0) {
						virusenHost1.remove(id);
					}
					if(i == 1) {
						virusenHost2.remove(id);
					}
				} else if (!(viralClass.equals("others") && !(clas.contains("dsdna") | clas.contains("ssdna") | clas.contains("ssrna") | clas.contains("dsrna") | clas.contains("retro")
						   | clas.contains("satellites") | clas.contains("virophages") | clas.contains("viroid")))) {
					if (i == 0) {
						virusenHost1.remove(id);
					}
					if(i == 1) {
						virusenHost2.remove(id);
					}
				}
			}
		}
		
		Map<String, Set<Integer>> map =new HashMap();
		map.put("ID1", virusenHost1);
		map.put("ID2", virusenHost2);
		intersection = new HashSet<Integer>(virusenHost1);
		intersection.retainAll(virusenHost2);
		map.put("Intersectoin", intersection);
		return map;
	}
}